# Template

```elixir
Mix.install([
  {:req, "~> 0.4.5"},
  {:vega_lite, "~> 0.1.8"},
  {:kino_vega_lite, "~> 0.1.11"}
])

alias VegaLite, as: Vl

defmodule AOC do
  @aoc_session System.fetch_env!("LB_AOC_SESSION")

  def day(day, year) when day in 1..25 do
    headers = [cookie: "session=#{@aoc_session}"]
    req = Req.new(base_url: "https://adventofcode.com/#{year}/day/#{day}", headers: headers)
    input = Req.get!(req, url: "/input").body

    if input =~ "Please don't repeatedly request this endpoint before it unlocks",
      do: {:error, "Day #{day} hasn't been unlocked yet"},
      else: {:ok, %{req: req, input: input}}
  end

  def submit(answer, %{req: req}, part \\ :part_1) when part in [:part_1, :part_2] do
    part = if part == :part_2, do: 2, else: 1

    if !part_already_completed?(part, req) do
      body = Req.post!(req, url: "/answer", form: [level: part, answer: answer]).body

      cond do
        body =~ "That's the right answer" -> {:correct, answer}
        body =~ "your answer is too low" -> {:too_low, answer}
        body =~ "your answer is too high" -> {:too_high, answer}
        :else -> {:incorrect, answer}
      end
    else
      {:already_completed_part, answer}
    end
  end

  defp part_already_completed?(part, req) do
    body = Req.get!(req).body

    cond do
      body =~ "Both parts of this puzzle are complete!" -> true
      body =~ "The first half of this puzzle is complete!" -> part == 1
      :else -> false
    end
  end
end
```

## Day

```elixir
{:ok, day} = AOC.day(1, 2023)
day.input
```

```elixir
test_input = """
"""
```

## Part 1

```elixir
defmodule P1 do
  def solve(input) do
    input
  end
end
```

```elixir
test_input
|> P1.solve()
```

## Part 2

```elixir
defmodule P2 do
  def solve(input) do
    input
  end
end
```

```elixir
test_input
|> P2.solve()
```

<!-- livebook:{"offset":1840,"stamp":{"token":"XCP.ogitnw59L7seDMaqM4BSpYpJRmkZq2Cs4XieI9MaGUeGP4adfRiZotz8hV4sXZSIH_bDgoJ5_n-NzWpSocdp2ovcbqiABAgto6GUDM9Bp-X7j-oGaCw","version":2}} -->
