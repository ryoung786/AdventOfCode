# Template

```elixir
Mix.install([
  {:req, "~> 0.4.5"},
  {:vega_lite, "~> 0.1.8"},
  {:kino_vega_lite, "~> 0.1.11"}
])

alias VegaLite, as: Vl

defmodule AOC do
  @aoc_session System.fetch_env!("LB_AOC_SESSION")
  def day(day, year \\ 2023) when day in 1..25 do
    req =
      Req.new(
        base_url: "https://adventofcode.com/#{year}/day/#{day}",
        headers: [cookie: "session=#{@aoc_session}"]
      )

    %{
      req: req,
      input: Req.get!(req, url: "/input").body,
      year: year,
      day: day
    }
  end

  def submit(answer, %{req: req}, opts \\ []) do
    part = Keyword.get(opts, :part, 1)
    body = Req.get!(req).body

    actual_level =
      cond do
        body =~ "Both parts of this puzzle are complete!" -> 3
        body =~ "The first half of this puzzle is complete!" -> 2
        :else -> 1
      end

    with true <- part in 1..2 || {:error, "Part must be 1 or 2", answer},
         true <- part == actual_level || {:error, level_error_msg(actual_level), answer} do
      body = Req.post!(req, url: "/answer", form: [level: part, answer: answer]).body

      cond do
        body =~ "That's the right answer" -> {:correct, answer}
        body =~ "your answer is too low" -> {:too_low, answer}
        body =~ "your answer is too high" -> {:too_high, answer}
        :else -> {:incorrect, answer}
      end
    end
  end

  defp level_error_msg(3), do: "Already completed both parts."
  defp level_error_msg(2), do: "Already completed part 1. Please submit part 2."
  defp level_error_msg(1), do: "Please submit part 1."
end

# Example usage:
#
# day = AOC.day(22)
# day.input
# |> calculate_answer()
# |> AOC.submit(day, part: 1)
```

## Part 1

```elixir
day = AOC.day(1)
```

```elixir
defmodule P1 do
end
```

## Part 2

```elixir
defmodule P2 do
end
```

<!-- livebook:{"offset":1804,"stamp":{"token":"XCP.hCbZvzficI3YuMPEZkOmo86dU1Dgi84We-Cq6bJ7pq9k7U_7kedoPxwtYFFFdxm8qVEld0RYnPUrp5a7L-sFp3pATabtoLNpm4aumgwpc99j-NsatP0","version":2}} -->
