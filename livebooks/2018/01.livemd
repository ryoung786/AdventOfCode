# 2018 Day 01

```elixir
Mix.install([
  {:req, "~> 0.4.5"},
  {:vega_lite, "~> 0.1.8"},
  {:kino_vega_lite, "~> 0.1.11"}
])

alias VegaLite, as: Vl

defmodule AOC do
  @aoc_session System.fetch_env!("LB_AOC_SESSION")

  def day(day, year) when day in 1..25 do
    headers = [cookie: "session=#{@aoc_session}"]
    req = Req.new(base_url: "https://adventofcode.com/#{year}/day/#{day}", headers: headers)
    input = Req.get!(req, url: "/input").body

    if input =~ "Please don't repeatedly request this endpoint before it unlocks",
      do: {:error, "Day #{day} hasn't been unlocked yet"},
      else: {:ok, %{req: req, input: input}}
  end

  def submit(answer, %{req: req}, part \\ :part_1) when part in [:part_1, :part_2] do
    part = if part == :part_2, do: 2, else: 1

    if !part_already_completed?(part, req) do
      body = Req.post!(req, url: "/answer", form: [level: part, answer: answer]).body

      cond do
        body =~ "That's the right answer" -> {:correct, answer}
        body =~ "your answer is too low" -> {:too_low, answer}
        body =~ "your answer is too high" -> {:too_high, answer}
        :else -> {:incorrect, answer}
      end
    else
      {:already_completed_part, answer}
    end
  end

  defp part_already_completed?(part, req) do
    body = Req.get!(req).body

    cond do
      body =~ "Both parts of this puzzle are complete!" -> true
      body =~ "The first half of this puzzle is complete!" -> part == 1
      :else -> false
    end
  end

  def nums(str) do
    Regex.scan(~r/\d+/, str) |> Enum.map(fn [x] -> String.to_integer(x) end)
  end
end

{:ok, day} = AOC.day(1, 2018)
```

## Part 1

```elixir
test_input = """
+1\n+1\n+1
"""
```

```elixir
defmodule P1 do
  def solve(input) do
    input
    |> String.split("\n", trim: true)
    |> Enum.map(&String.to_integer/1)
    |> Enum.sum()
  end
end

day.input |> P1.solve()
```

## Part 2

```elixir
defmodule P2 do
  def solve(input) do
    input
    |> String.split("\n", trim: true)
    |> Enum.map(&String.to_integer/1)
    |> Stream.cycle()
    |> Enum.reduce_while({MapSet.new([0]), 0}, fn step, {seen, curr} ->
      freq = curr + step
      if freq in seen, do: {:halt, freq}, else: {:cont, {MapSet.put(seen, freq), freq}}
    end)
  end
end

0 = "+1\n-1" |> P2.solve()
10 = "+3\n+3\n+4\n-2\n-4" |> P2.solve()
5 = "-6\n+3\n+8\n+5\n-6" |> P2.solve()
14 = "+7\n+7\n-2\n-7\n-4" |> P2.solve()

day.input |> P2.solve() |> AOC.submit(day, :part_2)
```

<!-- livebook:{"offset":2456,"stamp":{"token":"XCP.2mSxAgjZgV1lvC-h-aFh47a1XRMsEnCcJa7e0YCIVxDQCUURVFqMMiaGh9CbYLn-4zlVe6lkb6hcIEh8U0NjCy30Whzlb4d4NZyA0pix_14ZFz8lm2k","version":2}} -->
