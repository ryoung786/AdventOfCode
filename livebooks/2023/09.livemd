# 2023 Day 09

```elixir
Mix.install([
  {:req, "~> 0.4.5"},
  {:vega_lite, "~> 0.1.8"},
  {:kino_vega_lite, "~> 0.1.11"}
])

alias VegaLite, as: Vl

defmodule AOC do
  @aoc_session System.fetch_env!("LB_AOC_SESSION")

  def day(day, year) when day in 1..25 do
    headers = [cookie: "session=#{@aoc_session}"]
    req = Req.new(base_url: "https://adventofcode.com/#{year}/day/#{day}", headers: headers)
    input = Req.get!(req, url: "/input").body

    if input =~ "Please don't repeatedly request this endpoint before it unlocks",
      do: {:error, "Day #{day} hasn't been unlocked yet"},
      else: {:ok, %{req: req, input: input}}
  end

  def submit(answer, %{req: req}, part \\ :part_1) when part in [:part_1, :part_2] do
    part = if part == :part_2, do: 2, else: 1

    if !part_already_completed?(part, req) do
      body = Req.post!(req, url: "/answer", form: [level: part, answer: answer]).body

      cond do
        body =~ "That's the right answer" -> {:correct, answer}
        body =~ "your answer is too low" -> {:too_low, answer}
        body =~ "your answer is too high" -> {:too_high, answer}
        :else -> {:incorrect, answer}
      end
    else
      {:already_completed_part, answer}
    end
  end

  defp part_already_completed?(part, req) do
    body = Req.get!(req).body

    cond do
      body =~ "Both parts of this puzzle are complete!" -> true
      body =~ "The first half of this puzzle is complete!" -> part == 1
      :else -> false
    end
  end

  def nums(str) do
    Regex.scan(~r/\d+/, str) |> Enum.map(fn [x] -> String.to_integer(x) end)
  end
end

{:ok, day} = AOC.day(9, 2023)
```

## Part 1

```elixir
test_input = """
0 3 6 9 12 15
1 3 6 10 15 21
10 13 16 21 30 45
"""
```

```elixir
"2 -2 -2 7 44 166 512 1375 3320 7387 15464 31029 60732 117883 230123 455904 918822 1876972 3859134 7925415 16154444"
|> AOC.nums()
```

```elixir
defmodule P1 do
  def nums(str) do
    str |> String.split() |> Enum.map(&String.to_integer/1)
  end

  def solve(input) do
    input
    |> String.split("\n", trim: true)
    |> Enum.map(&nums/1)
    |> Enum.map(&Enum.reverse/1)
    |> Enum.map(&next_value/1)
    |> Enum.sum()
  end

  def next_value([a | _] = nums) do
    [b | _] = next_line(nums)
    b + a
  end

  def next_line(nums) do
    if Enum.all?(nums, &(&1 == 0)) do
      [0]
    else
      newline =
        nums
        |> Enum.chunk_every(2, 1, :discard)
        |> Enum.map(fn [a, b] -> a - b end)

      [next_value(newline) | newline]
    end
  end
end

test_input |> P1.solve()
day.input |> P1.solve()
```

## Part 2

```elixir
defmodule P2 do
  def solve(input) do
    input
    |> String.split("\n", trim: true)
    |> Enum.map(&P1.nums/1)
    |> Enum.map(&next_value/1)
    |> Enum.sum()
  end

  def next_value([a | _] = nums) do
    [b | _] = next_line(nums)
    b + a
  end

  def next_line(nums) do
    if Enum.all?(nums, &(&1 == 0)) do
      [0]
    else
      newline =
        nums
        |> Enum.chunk_every(2, 1, :discard)
        |> Enum.map(fn [a, b] -> a - b end)

      [next_value(newline) | newline]
    end
  end
end

test_input |> P2.solve()
day.input |> P2.solve() |> AOC.submit(day, :part_2)
```

<!-- livebook:{"offset":3173,"stamp":{"token":"XCP.q0NWiMDQZDYzYvzT3LnFGjCa9_bXzObWz_jxVNOSrhQbNZC_CCoTpusTuC9BKtr7ac7XlafKJDNlk_2J8wtjSnVdt3Kts7oOqt528-b2hCkjLMo2VpI","version":2}} -->
